<?xml version="1.0" encoding="UTF-8" ?>
 <Module>
	<ModulePrefs title="Hello Farm" description="Hello Farm" author="NiHaiyu" author_location="China" height="660" width="760" author_email="nostaff@sina.com"
		screenshot="http://farm.lf3g.com/newfarm/farm-280.png"
		pic="http://farm.lf3g.com/newfarm/farm-120x60.png" >
		<Require feature="opensocial-0.8"/>
		<Require feature="opennate" />
		<Require feature="views"/>
		<Locale lang="en" country="us" />
	</ModulePrefs>
	<Content type="html">
		<![CDATA[
			<div id='message' style="display:none;background-color: #ebe6cf;border: 0px solid #e2c822;color: #7a7256;padding: 10px;font-size: 13px;font-weight: bold;"></div>
			<div id="flash_area">Loading...</div>
			<script type="text/javascript" src="http://farm.lf3g.com/static/js/jquery-1.3.2.min.js"> </script>
			<script type="text/javascript">
				var MYFARM_URL = "http://farm.lf3g.com";
				var VERSION = Math.random();

				var me = {};
				var friendIds = new Array();
				var friendsArr = new Array();
				var item_id = 0;
				
				function showMessage(msg){
					if(!msg || msg.length <=0 )return;
					$('#message').html(msg).slideDown(1500,function(){$('#message').hide().fadeIn(3000).css('margin-bottom', '5px');})
				}
				
				function isReady(){
					return true;
				}

				function loadSocialData(){
					return {"user":me, "friendIds":friendIds, "friends":friendsArr};
				}
		
				function loadFlash(vars){
					$('#flash_area').empty();
					$('#flash_area').flash({
						swf: 'http://farm.lf3g.com/static/swf/hellofarm.swf?version=v_' + VERSION, 
						width: 760, 
						height: 600, 
						params: {
							flashvars: vars
						}
					});
				}
				
				function request() {
					showMessage("MyFarm testing........");
					
				    var params = {};
				    params[opensocial.DataRequest.PeopleRequestFields.FILTER ] = opensocial.DataRequest.FilterType.HAS_APP;
				    var req = opensocial.newDataRequest();
				    var ownerFriends = opensocial.newIdSpec({ "userId" : "OWNER", "groupId" : "FRIENDS" });
				    req.add(req.newFetchPersonRequest((opensocial.IdSpec.PersonId.OWNER), params),"get_owner");
				   
				    var fparams = new Array();
				    for(var i = 0; i <= 10; i++){
						fparams.push({});
						var start = ((i * 20) - 20);
						if(start < 0)start = 0;
						if(i == 1)start = 20;
						var limit = 20;
						fparams[i][opensocial.DataRequest.PeopleRequestFields.FILTER ] = opensocial.DataRequest.FilterType.HAS_APP;
						fparams[i][opensocial.DataRequest.PeopleRequestFields.FIRST] = start;
						fparams[i][opensocial.DataRequest.PeopleRequestFields.MAX] = 20;
						req.add(req.newFetchPeopleRequest(ownerFriends,fparams[i]), ('get_friends' + (i+1)));
				   }
				   
				   req.send(response);
				}
			
				function response(dataResponse) {
					var ownerData = dataResponse.get('get_owner').getData();
					if(ownerData){
						me['uid']			= ownerData.getId();
						me['name']			= ownerData.getDisplayName();
						me['birth']			= ownerData.getField(opensocial.Person.Field.DATE_OF_BIRTH) || "";
						me['pic']			= ownerData.getField(opensocial.Person.Field.THUMBNAIL_URL) || "";
						me['gender']		= ownerData.getField("gender") || "M";
						me['about_me']		= ownerData.getField(opensocial.Person.Field.ABOUT_ME) || "";
						me['profile_url']	= ownerData.getField(opensocial.Person.Field.PROFILE_URL) || "";
						me['age']			= ownerData.getField(opensocial.Person.Field.AGE) || 0;
						me['address']		= ownerData.getField(opensocial.Person.Field.ADDRESSES) || "";
						me["platform"]		= "nate";
					}else{
						showMessage("Failed to Load Social data....");
						return;
					}
					
					if(me['address']){
						me['address'] = me['address'].formatted;
					}

					var flashVars = {};
					flashVars['uid'] = me['uid'];
					flashVars['version'] = '1.0';
					flashVars['appUrl'] = 'http://demo.demo.com';
					flashVars['appId'] = '1216';
					loadFlash(flashVars);

					// Add me into friends list
					friendIds.push(me['uid']);
					friendsArr.push({"uid":me['uid'], "name":me['name'], "pic":me['pic']});

					var curIndex = 0;
					for(var i = 0; i <= 10; i++){
						var index = (i+1);
						var limit = (index * 20);
						var friendsRes = dataResponse.get('get_friends' + index).getData(); 
						if(friendsRes != null && curIndex < friendsRes.getTotalSize() - 1){
							friendsRes.each(function(person) {
								if(!isExistedFriendId(person.getId()) && me['uid'] != person.getId()){
									friendIds.push( person.getId());
									friendsArr.push({"uid":person.getId(), "name":person.getDisplayName(), "pic":person.getField(opensocial.Person.Field.THUMBNAIL_URL)});
								}
							})
						}
					}
				}
				
				function isExistedFriendId(f_id){
					if(friendIds == null){
							return false;
					}
					for(var i = 0; i< friendIds.length; i++){
						if(friendIds[i] == f_id){
							return true;
						}
					}

					return false;
				}
	   
				function scrap(html){
					var params = {};
					try{
						var app_url = "http://appstore.nate.com/Main/View?apps_no=1216";
						html = html.toString().replace(/{apps}/gi, app_url);
					}catch(e){
						/*** Nothing to do ***/
					}
					params[openNate.ScrapParameters.CONTENT] = html;
					openNate.minihpScrap(params);
				}
				
				function postActivity(title) { 
					if(!title)return;
					var params = {}; 
					params[opensocial.Activity.Field.TITLE] = title.toString();
					var activity = opensocial.newActivity(params); 
					opensocial.requestCreateActivity(activity, 
						opensocial.CreateActivityPriority.HIGH, 
							function(status){ 
								if (status.hadError()){ 
									//alert("Error creating activity."); 
								} else { 
									//alert("Activity successfully created."); 
								}

							}
					);
				}
				
				function inviteFriends(friendIds){
					opensocial.requestShareApp(
							null,
							null,
							function(response){
							}
					);
				}
				
				var convertStringToJSON = function(data)
				{
					try
					{
						var func = new Function("return " + data + ";");
						return func();
					}
					catch (e)
					{
						 //alert("Error : " + e.description + "\r\n" + "data : " + data);
					}
					return null;
				}

				var passthrough ='';
				function payment(cparams){
					
					if(cparams == null){
						alert('System Error');
						return;
					}
					
					var instance = this;
					sendRequest(    "/getPassthrough.htm", 
									{"uid":me['username']}, 
									function(response){
										var responseData = convertStringToJSON(response.data);
										passthrough = responseData.passthrough;
										cparams.push(passthrough);
										instance.showPaymentPopUp(cparams);
									}
							   );
				}
				
				function showPaymentPopUp(cparams){
					var params = {}; 
					params[openNate.PaymentParameters.ITEMTYPE] = cparams[0]; 
					params[openNate.PaymentParameters.ITEMID] = cparams[1]; 
					params[openNate.PaymentParameters.ITEMNAME] = cparams[2]; 
					params[openNate.PaymentParameters.DOTORI] = cparams[3];
					params[openNate.PaymentParameters.THUMBNAIL] = cparams[4]; 
					params[openNate.PaymentParameters.CALLBACKFN] = "callbackPayment"; 
					params[openNate.PaymentParameters.PASSTHROUGH] = cparams[5];
					params[openNate.PaymentParameters.CALLBACKURL] = MYFARM_URL + "/payment.htm"; 
					openNate.dotoriPayment(params);
				}
				
				function getPassthrough(){
					sendRequest(	"/getPassthrough.htm", 
									{"uid":me['uid']}, 
									function(response){
										var responseData = convertStringToJSON(response.data);
										passthrough = responseData.passthrough;
									}
							   );
				}
				
				function getCurrentPassthrough(){
					return passthrough;
				}

				function callbackPayment(response){
					var flash =  $.browser.msie?window.Myfarm:window.document.Myfarm;
					if(!flash){
						alert("Payment System Error");
					}
					if (response.status != 'true'){ 
						flash.returnCharge("-500");
					} else { 
						flash.returnCharge("200");
					}
					item_id = 0;
				}
	  
				function sendRequest(action_url ,querys, callback, type)
				{
					var postdata = '';
					if (typeof querys == 'string')
					{
						postdata = querys;
					}
					else
					{
							for (var key in querys)
							{
									var value = querys[key];
									if (typeof value == 'object')
									{
											for (var item in value)
											{
													if (postdata == "")
															postdata = key + "=" + value[item];
													else
															postdata += "&" + key + "=" + value[item];
											}
									}
									else
									{
											if (postdata == "")
													postdata = key + "=" + value;
											else
													postdata += "&" + key + "=" + value;
									}

							}
					}
					postdata += "&v=" + VERSION;
					var params = {};
					params[gadgets.io.RequestParameters.CONTENT_TYPE] = (!type || type == "undefined")?gadgets.io.ContentType.TEXT:type;
					params[gadgets.io.RequestParameters.AUTHORIZATION] = gadgets.io.AuthorizationType.SIGNED;
					params[gadgets.io.RequestParameters.POST_DATA] = postdata;
					params[gadgets.io.RequestParameters.METHOD] = gadgets.io.MethodType.POST;
					gadgets.io.makeRequest(MYFARM_URL + '/' + action_url, callback, params);
				}
				
				gadgets.util.registerOnLoadHandler(request);    
			</script>
		]]>
	</Content>
</Module>
